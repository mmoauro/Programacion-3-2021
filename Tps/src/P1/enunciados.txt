Ejercicio 1.
Implemente los métodos indicados del esqueleto de Lista desarrollado en Teoría (insertFront,
extractFront, isEmpty, size). Agregar también el método: Object get(index)

Ejercicio 2.
Considerando la implementación de la Lista realizado en el ejercicio anterior, comparar la
complejidad computacional contra un array en las siguientes operaciones:
1.- Insertar al principio.
1- Es mas complejo en el array, ya que hay que hacer array.length - 1 corrimientos hacia la derecha. En cambio en la lista vinculada solo se cambia el puntero del primer nodo. En el array seria O(n) y en la lista vinculada O(1).
2.- Buscar un elemento en una posición.
2. Es mas complejo en la lista vinculada, ya que hay que ir nodo por nodo. En el peor caso en la lista vinculada seria O(n), y en el array O(1).
3.- Determinar la cantidad de elementos.
3- Si se tiene el atributo size en la lista vinculada la complejidad seria la misma que en el array. Ambas O(1).

Ejercicio 3.
Implemente una Pila utilizando la Lista del ejercicio 1. A una pila se le pueden agregar elementos
utilizando el método push(Object o). Para retirar elementos de la colección se utiliza el método
pop(), que retorna el último elemento agregado a la colección y lo elimina de la misma. Es
posible consultar el tope de la pila (sin eliminarlo) utilizando el método top(). Por último, es
posible invertir el orden de los elementos de la pila mediante el método reverse().

Ejercicio 4.
A la implementación de la clase Lista realizada en el ejercicio 1, agregue un método indexOf,
que reciba un elemento y retorne el indice donde esta almacenado ese elemento, o -1 si el
elemento no existe en la lista.


Ejercicio 5.
A partir de la clase Lista implementada en el ejercicio 1, implemente el patrón iterator-iterable,
para que la lista sea iterable. ¿Existe alguna ventaja computacional a la hora de recorrer la lista
de principio a fin si se cuenta con un iterador?


Ejercicio 6.
Escriba un procedimiento que dadas dos listas construya otra con los elementos comunes,
suponiendo que: a) las listas están desordenadas y la lista resultante debe quedar ordenada. b)
las listas están ordenadas y la lista resultante debe mantenerse ordenada.


Ejercicio 7.
Escriba una función que dadas dos listas construya otra con los elementos que están en la
primera pero no en la segunda.

Ejercicio 8.
Considerando la Implementación de Lista del ejercicio 1, realice una Lista doblemente vinculada.


Ejercicio 9.
Verificar si una cadena de texto es palindroma (capicua).
Nota: Mediante moodle indicaremos un ejercicio relacionado con los temas vistos en este
práctico que deberá ser entregado en alguna fecha pautada